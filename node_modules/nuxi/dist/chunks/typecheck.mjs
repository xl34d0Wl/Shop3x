import process from 'node:process';
import { fileURLToPath } from 'node:url';
import { d as defineCommand, a } from '../shared/nuxi.vClchuwn.mjs';
import { l as loadKit, c as createJiti } from '../shared/nuxi.BTNtCwAV.mjs';
import { x as ve } from './main.mjs';
import { c as cwdArgs, l as logLevelArgs, a as legacyRootDirArgs } from '../shared/nuxi.DpekDEZq.mjs';
import { r as resolve } from '../shared/nuxi.BHLUJ6h2.mjs';
import 'node:util';
import 'node:path';
import 'node:tty';
import 'node:module';
import '../shared/nuxi.oF0sJJb9.mjs';
import '../shared/nuxi.E-ZsRS8r.mjs';
import 'node:os';
import 'node:fs';
import 'node:assert';
import 'node:v8';
import 'node:crypto';
import 'node:perf_hooks';
import 'node:vm';
import 'assert';
import 'fs';
import 'module';
import 'os';
import 'path';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';
import 'child_process';
import 'stream';
import 'readline';

const typecheck = defineCommand({
  meta: {
    name: "typecheck",
    description: "Runs `vue-tsc` to check types throughout your app."
  },
  args: {
    ...cwdArgs,
    ...logLevelArgs,
    ...legacyRootDirArgs
  },
  async run(ctx) {
    process.env.NODE_ENV = process.env.NODE_ENV || "production";
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir);
    const { loadNuxt, buildNuxt, writeTypes } = await loadKit(cwd);
    const nuxt = await loadNuxt({
      cwd,
      overrides: {
        _prepare: true,
        logLevel: ctx.args.logLevel
      }
    });
    await writeTypes(nuxt);
    await buildNuxt(nuxt);
    await nuxt.close();
    const jiti = createJiti(cwd);
    const [resolvedTypeScript, resolvedVueTsc] = await Promise.all([
      jiti.esmResolve("typescript", { try: true }),
      jiti.esmResolve("vue-tsc/bin/vue-tsc.js", { try: true })
    ]);
    if (resolvedTypeScript && resolvedVueTsc) {
      await ve(fileURLToPath(resolvedVueTsc), ["--noEmit"], {
        nodeOptions: {
          stdio: "inherit",
          cwd
        }
      });
    } else {
      if (a) {
        await ve(
          "bun",
          "install typescript vue-tsc --global --silent".split(" "),
          { nodeOptions: { stdio: "inherit", cwd } }
        );
        await ve("bunx", "vue-tsc --noEmit".split(" "), {
          nodeOptions: {
            stdio: "inherit",
            cwd
          }
        });
      } else {
        await ve(
          "npx",
          "-p vue-tsc -p typescript vue-tsc --noEmit".split(" "),
          { nodeOptions: { stdio: "inherit", cwd } }
        );
      }
    }
  }
});

export { typecheck as default };
