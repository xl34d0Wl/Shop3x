import { fork } from 'node:child_process';
import process from 'node:process';
import { d as defineCommand, a, A, l as logger } from '../shared/nuxi.vClchuwn.mjs';
import { l as loadKit, c as createJiti } from '../shared/nuxi.BTNtCwAV.mjs';
import './index2.mjs';
import 'node:http';
import 'node:https';
import 'node:util';
import 'node:net';
import 'node:os';
import 'node:path';
import 'node:tty';
import 'node:fs';
import 'node:fs/promises';
import { s as showVersions } from '../shared/nuxi.CZkFAOfB.mjs';
import { o as overrideEnv } from '../shared/nuxi.onla3I0R.mjs';
import { c as cwdArgs, l as logLevelArgs, e as envNameArgs, a as legacyRootDirArgs, d as dotEnvArgs } from '../shared/nuxi.DpekDEZq.mjs';
import { r as resolve } from '../shared/nuxi.BHLUJ6h2.mjs';
import { s as setupDotenv } from '../shared/nuxi.C5KDh4qT.mjs';
import 'node:url';
import 'node:module';
import '../shared/nuxi.oF0sJJb9.mjs';
import '../shared/nuxi.E-ZsRS8r.mjs';
import 'node:assert';
import 'node:v8';
import 'node:crypto';
import 'node:perf_hooks';
import 'node:vm';
import 'assert';
import 'fs';
import 'module';
import 'os';
import 'path';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';
import 'http';
import 'https';
import '../shared/nuxi.DdI-vRyV.mjs';
import 'crypto';
import '../shared/nuxi.BZI8rqcO.mjs';
import '../shared/nuxi.CQKunj3-.mjs';
import '../shared/nuxi.ChFrgAY-.mjs';

function getArgs() {
  return {
    port: {
      type: "string",
      description: "Port to listen on (use `PORT` environment variable to override)"
    },
    host: {
      description: "Host to listen on. If no value or an empty string provided, will listen on all available interfaces (use `HOST` environment variable to override)"
    },
    clipboard: {
      type: "boolean",
      description: "Copy the URL to the clipboard"
    },
    open: {
      type: "boolean",
      description: "Open the URL in the browser"
    },
    https: {
      type: "boolean",
      description: "Enable HTTPS"
    },
    "https.cert": {
      type: "string",
      description: "Path to TLS certificate used with HTTPS in PEM format"
    },
    "https.key": {
      type: "string",
      description: "Path to TLS key used with HTTPS in PEM format"
    },
    "https.pfx": {
      type: "string",
      description: "Path to PKCS#12 (.p12/.pfx) keystore containing a TLS certificate and Key"
    },
    "https.passphrase": {
      type: "string",
      description: "Passphrase used for TLS key or keystore"
    },
    "https.validityDays": {
      type: "string",
      description: "Validity in days of the autogenerated TLS certificate (https: true)"
    },
    "https.domains": {
      type: "string",
      description: "Comma seperated list of domains and IPs, the autogenerated certificate should be valid for (https: true)"
    },
    publicURL: {
      type: "string",
      description: "Displayed public URL (used for QR code)",
      required: false
    },
    qr: {
      type: "boolean",
      description: "Display The QR code of public URL when available",
      required: false
    },
    public: {
      type: "boolean",
      description: "Listen to all network interfaces",
      required: false
    },
    tunnel: {
      type: "boolean",
      description: "Open a tunnel using https://github.com/unjs/untun",
      required: false
    }
  };
}
function parseArgs(args) {
  return {
    port: args.port,
    // prettier-ignore
    hostname: typeof args.host === "string" ? args.host : args.host === true ? "" : undefined,
    clipboard: args.clipboard,
    open: args.open,
    qr: args.qr,
    publicURL: args.publicURL,
    public: args.public,
    tunnel: args.tunnel,
    https: args.https ? {
      cert: args["https.cert"],
      key: args["https.key"],
      pfx: args["https.pfx"],
      passphrase: args["https.passphrase"],
      validityDays: args["https.validityDays"] ? +args["https.validityDays"] : undefined,
      domains: args["https.domains"] ? args["https.domains"].split(",") : undefined
    } : false
  };
}

const forkSupported = !a && !A;
const command = defineCommand({
  meta: {
    name: "dev",
    description: "Run Nuxt development server"
  },
  args: {
    ...cwdArgs,
    ...logLevelArgs,
    ...envNameArgs,
    ...legacyRootDirArgs,
    ...getArgs(),
    ...dotEnvArgs,
    clear: {
      type: "boolean",
      description: "Clear console on restart"
    },
    fork: {
      type: "boolean",
      description: forkSupported ? "Disable forked mode" : "Enable forked mode",
      default: forkSupported
    }
  },
  async run(ctx) {
    overrideEnv("development");
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir);
    await showVersions(cwd);
    await setupDotenv({ cwd, fileName: ctx.args.dotenv });
    const { loadNuxtConfig } = await loadKit(cwd);
    const nuxtOptions = await loadNuxtConfig({
      cwd,
      envName: ctx.args.envName,
      // c12 will fall back to NODE_ENV
      overrides: {
        dev: true,
        logLevel: ctx.args.logLevel,
        ...ctx.data?.overrides
      }
    });
    const listenOptions = _resolveListenOptions(nuxtOptions, ctx.args);
    if (ctx.args.fork) {
      const devProxy = await _createDevProxy(nuxtOptions, listenOptions);
      await _startSubprocess(devProxy, ctx.rawArgs);
      return { listener: devProxy?.listener };
    } else {
      const { createNuxtDevServer } = await import('./dev2.mjs');
      const devServer = await createNuxtDevServer(
        {
          cwd,
          overrides: ctx.data?.overrides,
          logLevel: ctx.args.logLevel,
          clear: ctx.args.clear,
          dotenv: !!ctx.args.dotenv,
          envName: ctx.args.envName,
          loadingTemplate: nuxtOptions.devServer.loadingTemplate,
          devContext: {}
        },
        listenOptions
      );
      await devServer.init();
      return { listener: devServer?.listener };
    }
  }
});
async function _createDevProxy(nuxtOptions, listenOptions) {
  const jiti = createJiti(nuxtOptions.rootDir);
  let loadingMessage = "Nuxt dev server is starting...";
  let loadingTemplate = nuxtOptions.devServer.loadingTemplate;
  for (const url of nuxtOptions.modulesDir) {
    if (loadingTemplate) {
      break;
    }
    loadingTemplate = await jiti.import("@nuxt/ui-templates", { parentURL: url }).then((r) => r.loading);
  }
  const { createProxyServer } = await import('./index3.mjs');
  const proxy = createProxyServer({});
  let address;
  const handler = (req, res) => {
    if (!address) {
      res.statusCode = 503;
      res.setHeader("Content-Type", "text/html");
      res.end(loadingTemplate({ loading: loadingMessage }));
      return;
    }
    return proxy.web(req, res, { target: address });
  };
  const wsHandler = (req, socket, head) => {
    if (!address) {
      socket.destroy();
      return;
    }
    return proxy.ws(req, socket, { target: address }, head);
  };
  const { listen } = await import('./index2.mjs');
  const listener = await listen(handler, listenOptions);
  listener.server.on("upgrade", wsHandler);
  return {
    listener,
    handler,
    wsHandler,
    setAddress: (_addr) => {
      address = _addr;
    },
    setLoadingMessage: (_msg) => {
      loadingMessage = _msg;
    }
  };
}
async function _startSubprocess(devProxy, rawArgs) {
  let childProc;
  const kill = (signal) => {
    if (childProc) {
      childProc.kill(signal);
      childProc = undefined;
    }
  };
  const restart = async () => {
    if (process.platform === "win32") {
      kill("SIGTERM");
    } else {
      kill("SIGHUP");
    }
    childProc = fork(globalThis.__nuxt_cli__.entry, ["_dev", ...rawArgs], {
      execArgv: [
        "--enable-source-maps",
        process.argv.find((a) => a.includes("--inspect"))
      ].filter(Boolean),
      env: {
        ...process.env,
        __NUXT_DEV__: JSON.stringify({
          proxy: {
            url: devProxy.listener.url,
            urls: await devProxy.listener.getURLs(),
            https: devProxy.listener.https
          }
        })
      }
    });
    childProc.on("close", (errorCode) => {
      if (errorCode) {
        process.exit(errorCode);
      }
    });
    childProc.on("message", (message) => {
      if (message.type === "nuxt:internal:dev:ready") {
        devProxy.setAddress(`http://127.0.0.1:${message.port}`);
      } else if (message.type === "nuxt:internal:dev:loading") {
        devProxy.setAddress(undefined);
        devProxy.setLoadingMessage(message.message);
      } else if (message.type === "nuxt:internal:dev:restart") {
        restart();
      } else if (message.type === "nuxt:internal:dev:rejection") {
        logger.withTag("nuxi").info(`Restarting Nuxt due to error: \`${message.message}\``);
        restart();
      }
    });
  };
  for (const signal of [
    "exit",
    "SIGTERM",
    "SIGINT",
    "SIGQUIT"
  ]) {
    process.once(signal, () => {
      kill(signal === "exit" ? 0 : signal);
    });
  }
  await restart();
  return {
    restart,
    kill
  };
}
function _resolveListenOptions(nuxtOptions, args) {
  const _port = args.port ?? args.p ?? process.env.NUXT_PORT ?? process.env.NITRO_PORT ?? process.env.PORT ?? nuxtOptions.devServer.port;
  const _hostname = typeof args.host === "string" ? args.host : (args.host === true ? "" : undefined) ?? process.env.NUXT_HOST ?? process.env.NITRO_HOST ?? process.env.HOST ?? nuxtOptions._layers?.[0]?.config?.devServer?.host ?? undefined;
  const _public = args.public ?? (_hostname && !["localhost", "127.0.0.1", "::1"].includes(_hostname)) ? true : undefined;
  const _httpsCert = args["https.cert"] || args.sslCert || process.env.NUXT_SSL_CERT || process.env.NITRO_SSL_CERT || typeof nuxtOptions.devServer.https !== "boolean" && nuxtOptions.devServer.https && "cert" in nuxtOptions.devServer.https && nuxtOptions.devServer.https.cert || "";
  const _httpsKey = args["https.key"] || args.sslKey || process.env.NUXT_SSL_KEY || process.env.NITRO_SSL_KEY || typeof nuxtOptions.devServer.https !== "boolean" && nuxtOptions.devServer.https && "key" in nuxtOptions.devServer.https && nuxtOptions.devServer.https.key || "";
  const _httpsPfx = args["https.pfx"] || typeof nuxtOptions.devServer.https !== "boolean" && nuxtOptions.devServer.https && "pfx" in nuxtOptions.devServer.https && nuxtOptions.devServer.https.pfx || "";
  const _httpsPassphrase = args["https.passphrase"] || typeof nuxtOptions.devServer.https !== "boolean" && nuxtOptions.devServer.https && "passphrase" in nuxtOptions.devServer.https && nuxtOptions.devServer.https.passphrase || "";
  const httpsEnabled = !!(args.https ?? nuxtOptions.devServer.https);
  const _listhenOptions = parseArgs({
    ...args,
    "open": args.o || args.open,
    "https": httpsEnabled,
    "https.cert": _httpsCert,
    "https.key": _httpsKey,
    "https.pfx": _httpsPfx,
    "https.passphrase": _httpsPassphrase
  });
  const httpsOptions = httpsEnabled && {
    ...nuxtOptions.devServer.https,
    ..._listhenOptions.https
  };
  return {
    ..._listhenOptions,
    port: _port,
    hostname: _hostname,
    public: _public,
    https: httpsOptions,
    baseURL: nuxtOptions.app.baseURL.startsWith("./") ? nuxtOptions.app.baseURL.slice(1) : nuxtOptions.app.baseURL
  };
}

export { command as default };
