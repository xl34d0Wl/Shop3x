import { d as defineCommand, l as logger } from '../shared/nuxi.vClchuwn.mjs';
import { r as readPackageJSON } from '../shared/nuxi.CQKunj3-.mjs';
import { x as ve } from './main.mjs';
import { c as cwdArgs, l as logLevelArgs, a as legacyRootDirArgs } from '../shared/nuxi.DpekDEZq.mjs';
import { r as resolve } from '../shared/nuxi.BHLUJ6h2.mjs';
import 'node:util';
import 'node:path';
import 'node:process';
import 'node:tty';
import 'node:url';
import 'node:fs';
import 'node:module';
import '../shared/nuxi.ChFrgAY-.mjs';
import 'node:assert';
import 'node:v8';
import '../shared/nuxi.BZI8rqcO.mjs';
import 'child_process';
import 'path';
import 'process';
import 'stream';
import 'readline';

const MODULE_BUILDER_PKG = "@nuxt/module-builder";
const buildModule = defineCommand({
  meta: {
    name: "build-module",
    description: `Helper command for using ${MODULE_BUILDER_PKG}`
  },
  args: {
    ...cwdArgs,
    ...logLevelArgs,
    ...legacyRootDirArgs,
    stub: {
      type: "boolean",
      description: "Stub dist instead of actually building it for development"
    },
    sourcemap: {
      type: "boolean",
      description: "Generate sourcemaps"
    },
    prepare: {
      type: "boolean",
      description: "Prepare module for local development"
    }
  },
  async run(ctx) {
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir);
    const hasLocal = await readPackageJSON(MODULE_BUILDER_PKG, { url: cwd }).catch(() => false);
    const execArgs = Object.entries({
      "--stub": ctx.args.stub,
      "--sourcemap": ctx.args.sourcemap,
      "--prepare": ctx.args.prepare
    }).filter(([, value]) => value).map(([key]) => key);
    let cmd = "nuxt-module-build";
    if (!hasLocal) {
      logger.warn(
        `Cannot find locally installed version of \`${MODULE_BUILDER_PKG}\` (>=0.2.0). Falling back to \`npx ${MODULE_BUILDER_PKG}\``
      );
      cmd = "npx";
      execArgs.unshift(MODULE_BUILDER_PKG);
    }
    await ve(cmd, execArgs, {
      nodeOptions: {
        cwd,
        stdio: "inherit"
      }
    });
  }
});

export { buildModule as default };
